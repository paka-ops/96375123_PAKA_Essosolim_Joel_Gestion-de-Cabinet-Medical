openapi: 3.0.0
info:
  title: Medical App API
  version: 1.0.0
  description: API tests with pagination, filters, full CRUD
servers:
  - url: http://localhost:5000

paths:
  /api/patients:
    get:
      summary: Get Patients List (paginated, filtered)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
        - in: query
          name: gender
          schema:
            type: string
            example: Homme
      responses:
        '200':
          description: Success
    post:
      summary: Create Patient
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              user: USER_ID
              dateOfBirth: "1990-01-01"
              gender: Homme
              address: 123 rue Exemple
              medicalHistory: [diabète]
              allergies: [pollen]
              bloodGroup: A+
      responses:
        '200':
          description: Success

  /api/patients/{id}:
    get:
      summary: Get Patient by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
    put:
      summary: Update Patient (PUT)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              address: Nouvelle adresse
              bloodGroup: B-
      responses:
        '200':
          description: Success
    patch:
      summary: Patch Patient (PATCH)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              address: Adresse patchée
      responses:
        '200':
          description: Success
    delete:
      summary: Delete Patient
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success

  /api/doctors:
    get:
      summary: Get Doctors List (paginated)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Success
    post:
      summary: Create Doctor
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              user: USER_ID
              specialty: Cardiologie
              licenseNumber: MED123456
              consultationDuration: 30
              isAvailable: true
      responses:
        '200':
          description: Success

  /api/doctors/{id}:
    get:
      summary: Get Doctor by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
    put:
      summary: Update Doctor (PUT)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              consultationDuration: 45
      responses:
        '200':
          description: Success
    patch:
      summary: Patch Doctor (PATCH)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              isAvailable: false
      responses:
        '200':
          description: Success
    delete:
      summary: Delete Doctor
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success

  /api/appointments:
    get:
      summary: Get Appointments List (paginated)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Success
    post:
      summary: Create Appointment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              patient: PATIENT_ID
              doctor: DOCTOR_ID
              appointmentDate: "2025-08-10T10:00:00Z"
              notes: Consultation de routine
      responses:
        '200':
          description: Success

  /api/appointments/{id}:
    get:
      summary: Get Appointment by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
    put:
      summary: Update Appointment (PUT)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              notes: Nouvelle note
              status: completed
      responses:
        '200':
          description: Success
    patch:
      summary: Patch Appointment (PATCH)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              status: cancelled
      responses:
        '200':
          description: Success
    delete:
      summary: Delete Appointment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success

  /api/prescriptions:
    get:
      summary: Get Prescriptions List (paginated)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Success
    post:
      summary: Create Prescription
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              appointment: APPOINTMENT_ID
              doctor: DOCTOR_ID
              patient: PATIENT_ID
              medications:
                - name: Paracétamol
                  dosage: 500mg
                  frequency: 3x/jour
                  duration: 7 jours
              instructions: Prendre après les repas
      responses:
        '200':
          description: Success

  /api/prescriptions/{id}:
    get:
      summary: Get Prescription by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
    put:
      summary: Update Prescription (PUT)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              instructions: Nouvelle instruction
      responses:
        '200':
          description: Success
    patch:
      summary: Patch Prescription (PATCH)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              instructions: Instruction patchée
      responses:
        '200':
          description: Success
    delete:
      summary: Delete Prescription
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success

  /api/auth/register:
    post:
      summary: Register
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              email: user@example.com
              password: password123
              role: patient
              firstName: John
              lastName: Doe
      responses:
        '200':
          description: Success

  /api/auth/login:
    post:
      summary: Login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              email: user@example.com
              password: password123
      responses:
        '200':
          description: Success

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Patient:
      type: object
      properties:
        id:
          type: string
          example: 68999af8e698ec0020203cbd
        user:
          type: string
          description: Référence à l’utilisateur
        dateOfBirth:
          type: string
          format: date
          example: "1990-01-01"
        gender:
          type: string
          enum: [Homme, Femme, Autre]
          example: Homme
        address:
          type: string
          example: 123 rue Exemple
        medicalHistory:
          type: array
          items:
            type: string
          example: [diabète, hypertension]
        allergies:
          type: array
          items:
            type: string
          example: [pollen, penicilline]
        bloodGroup:
          type: string
          enum: ["A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"]
          example: A+

    Doctor:
      type: object
      properties:
        id:
          type: string
        user:
          type: string
        specialty:
          type: string
          example: Cardiologie
        licenseNumber:
          type: string
          example: MED123456
        consultationDuration:
          type: integer
          description: Durée en minutes
          example: 30
        isAvailable:
          type: boolean
          example: true

    Appointment:
      type: object
      properties:
        id:
          type: string
        patient:
          type: string
          description: Référence Patient
        doctor:
          type: string
          description: Référence Doctor
        appointmentDate:
          type: string
          format: date-time
          example: "2025-08-10T10:00:00Z"
        status:
          type: string
          enum: [scheduled, completed, cancelled]
          example: scheduled
        notes:
          type: string
          example: Consultation de routine

    Prescription:
      type: object
      properties:
        id:
          type: string
        appointment:
          type: string
          description: Référence Appointment
        doctor:
          type: string
          description: Référence Doctor
        patient:
          type: string
          description: Référence Patient
        medications:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Paracétamol
              dosage:
                type: string
                example: 500mg
              frequency:
                type: string
                example: 3x/jour
              duration:
                type: string
                example: 7 jours
        instructions:
          type: string
          example: Prendre après les repas

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - role
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 6
          example: password123
        role:
          type: string
          enum: [patient, doctor]
          example: patient
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token
        user:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
            role:
              type: string